import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, Integer, String, DateTime, Boolean
from sqlalchemy import select
import datetime
from aiogram.filters import Command

from dotenv import load_dotenv
import os

load_dotenv()

# --- Logging ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Config ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite+aiosqlite:///bot_db.sqlite")
AI_API_KEY = os.getenv("AI_API_KEY")
DEFAULT_MODEL = os.getenv("DEFAULT_MODEL")
SESSION_LENGTH_MINUTES = os.getenv("SESSION_LENGTH_MINUTES")
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
    

# --- Logging ---
logging.basicConfig(level=LOG_LEVEL)
logger = logging.getLogger(__name__)


# --- Bot Setup ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- SQLAlchemy Setup ---
Base = declarative_base()
engine = create_async_engine(DATABASE_URL, echo=True)
async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

# --- Models ---
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    telegram_id = Column(Integer, unique=True, index=True)
    username = Column(String)
    registered_at = Column(DateTime, default=datetime.datetime.utcnow)
    is_new = Column(Boolean, default=True)
    active_tariff = Column(String, default="trial")
    tariff_expires = Column(DateTime)
    
class Order(Base):
    __tablename__ = "orders"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, index=True)
    date = Column(DateTime, default=datetime.datetime.utcnow)
    description = Column(String)
    price = Column(Integer)
    
    # to do sessions (bot msg history, user msg history, res_lvl, emotion) achivments, relations on DB

# --- States ---
class MainMenu(StatesGroup):
    choosing = State()
    feedback = State()
    suggestion = State()
    error_report = State()
    free_session_resistance = State()
    free_session_emotion = State()
    free_session_format = State()
    free_session_confirm = State()

# --- UI Builders ---
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üß† –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é", callback_data="start_session")],
        [InlineKeyboardButton(text="üìä –ú–æ–∏ —Å–µ—Å—Å–∏–∏ –∏ –æ—Ç—á—ë—Ç—ã", callback_data="my_sessions")],
        [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–∫—É–ø–∫–∏", callback_data="profile")],
        [InlineKeyboardButton(text="üìö –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="feedback_menu")],
        [InlineKeyboardButton(text="ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø–æ–≥—Ä–∞–º–º–∞", callback_data="referral")],
        [InlineKeyboardButton(text="üéØ –ú–æ–∏ —Ü–µ–ª–∏", callback_data="goals")],
        [InlineKeyboardButton(text="üèÖ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")],
    ])

def feedback_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_feedback")],
        [InlineKeyboardButton(text="üìå –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ", callback_data="suggest_feature")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", callback_data="report_error")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")],
    ])
    
def cancel_feedback_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_feedback")]
    ])

def free_session_resistance_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–µ–µ", callback_data="resistance_medium")],
        [InlineKeyboardButton(text="üî¥ –í—ã—Å–æ–∫–æ–µ", callback_data="resistance_high")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ])

def free_session_emotion_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üò¢ –¢—Ä–µ–≤–æ–∂–Ω—ã–π –∏ —Ä–∞–Ω–∏–º—ã–π", callback_data="emotion_anxious")],
        [InlineKeyboardButton(text="üò° –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π", callback_data="emotion_aggressive")],
        [InlineKeyboardButton(text="üßä –•–æ–ª–æ–¥–Ω—ã–π, –æ—Ç—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–π", callback_data="emotion_cold")],
        [InlineKeyboardButton(text="üò∂ –ó–∞–∫—Ä—ã—Ç—ã–π, –≤ —à–æ–∫–µ", callback_data="emotion_shocked")],
        [InlineKeyboardButton(text="üò≠ –ù–∞ –≥—Ä–∞–Ω–∏ —Å—Ä—ã–≤–∞", callback_data="emotion_breakdown")],
        [InlineKeyboardButton(text="üôÉ –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ –≤–µ—Å—ë–ª—ã–π, –∏–∑–±–µ–≥–∞–µ—Ç —Ç–µ–º", callback_data="emotion_superficial")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_resistance")]
    ])

def free_session_format_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –¢–µ–∫—Å—Ç", callback_data="format_text")],
        [InlineKeyboardButton(text="üéß –ê—É–¥–∏–æ", callback_data="format_audio")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_emotion")]
    ])

def free_session_confirm_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü£ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é", callback_data="start_free_session")],
        [InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="end_free_session")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ])

def profile_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")],
        [InlineKeyboardButton(text="üì¶ –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç —Å–µ—Å—Å–∏–π", callback_data="buy_sessions")],
        [InlineKeyboardButton(text="üßæ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data="view_tariffs")],
        [InlineKeyboardButton(text="üìä –ú–æ–∏ —Å–µ—Å—Å–∏–∏ –∏ –æ—Ç—á—ë—Ç—ã", callback_data="my_sessions")],
        [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="support_contact")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")],
    ])

def profile_text(user_data: dict):
    return (
        f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        f"üë• –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user_data.get('username', 'unknown')}\n"
        f"üÜî ID: {user_data.get('telegram_id', 'unknown')}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data.get('registered_at', 'unknown')}\n"
        f"üéØ –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {user_data.get('active_tariff', 'trial')}\n\n"
        f"üìÜ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user_data.get('tariff_expires', '‚Äî')}\n"
        f"üìà –ü—Ä–æ–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {user_data.get('sessions_done', 0)}\n"
        f"üß† –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {user_data.get('last_scenario', '‚Äî')}\n\n"
        f"üí≥ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏\n"
        f"–ë–æ–Ω—É—Å –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \n\n"
        f"üõç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n"
        f"‚Ä¢ 10.06 ‚Äî –ü–æ–¥–ø–∏—Å–∫–∞ \"–ë–µ–∑–ª–∏–º–∏—Ç 30 –¥–Ω–µ–π\" ‚Äî 2490 ‚ÇΩ\n"
        f"‚Ä¢ 21.05 ‚Äî –ü–∞–∫–µ—Ç \"3 —Å–µ—Å—Å–∏–∏\" ‚Äî 590 ‚ÇΩ\n"
        f"‚Ä¢ 10.05 ‚Äî –ü—Ä–æ–±–Ω–∞—è —Å–µ—Å—Å–∏—è ‚Äî 0 ‚ÇΩ\n\n"
    )

def referral_text():
    return (
        "üéâ –ü—Ä–∏–≥–ª–∞—à–∞–π –∫–æ–ª–ª–µ–≥ ‚Äî –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π. –ó–∞ –∫–∞–∂–¥—É—é –æ–ø–ª–∞—á–∏–≤–∞—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n\n"
        "üéß 1 –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –ø–æ–¥–∞—Ä–æ–∫\n"
        "–∏–ª–∏\n"
        "üí∏ –°–∫–∏–¥–∫—É 10% –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É\n\n"
        "üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö: 3\n"
        "üí∞ –ë–æ–Ω—É—Å–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è\n\n"
        "üìé –¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n"
        "https://t.me/your_bot_name?start=ref_123456\n\n"
        "üëá –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?"
    )

def referral_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="copy_referral_link")],
        [InlineKeyboardButton(text="üìä –ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ", callback_data="my_referrals")],
        [InlineKeyboardButton(text="‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="how_referral_works")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_main")],
    ])
    
# --- Help Texts ---
HELP_MAIN_TEXT = (
    "üìö <b>–ü–æ–º–æ—â—å / –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</b>\n\n"
    "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá"
)

HELP_START_SESSION_TEXT = (
    "üß≠ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é</b>\n\n"
    "1Ô∏è‚É£ –ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é¬ª –≤ –º–µ–Ω—é\n"
    "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Ç–µ–º–∞—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–∞\n"
    "3Ô∏è‚É£ –£–∫–∞–∂–∏ —É—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–∏–ª–∏ –≤—ã–±–µ—Ä–∏ ¬´—Ä–∞–Ω–¥–æ–º¬ª)\n"
    "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –æ–±—â–µ–Ω–∏—è: üìù —Ç–µ–∫—Å—Ç –∏–ª–∏ üéß –∞—É–¥–∏–æ\n"
    "5Ô∏è‚É£ –í–µ–¥–∏ —Å–µ—Å—Å–∏—é 20 –º–∏–Ω—É—Ç\n\n"
    "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Äî –ø–æ–ª—É—á–∏—à—å —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–∏–π –æ—Ç—á—ë—Ç.\n\n"
)

HELP_AFTER_SESSION_TEXT = (
    "üìÑ <b>–ü–æ—Å–ª–µ —Å–µ—Å—Å–∏–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å:</b>\n\n"
    "‚Äì üß† –û—Ç—á—ë—Ç –æ—Ç –ò–ò-—Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞\n"
    "‚Äì üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏ —á—Ç–æ —É–ª—É—á—à–∏—Ç—å\n"
    "‚Äì üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
    "‚Äì üìä –ï–∂–µ–º–µ—Å—è—á–Ω—É—é —Å–≤–æ–¥–∫—É (–µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞)\n\n"
    "üí° –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞—Å—Ç–∏ –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Ä–µ–¥–µ.\n\n"
)

HELP_FAQ_TEXT = (
    "üí° <b>FAQ ‚Äî –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
    "‚ùì <b>–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏?</b>\n"
    "‚úÖ –î–∞! –î–æ—Å—Ç—É–ø–Ω–∞ 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è. –ü–æ—Ç–æ–º ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–∞–∫–µ—Ç.\n\n"
    "‚ùì <b>–ß–µ–º –±–æ—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç ChatGPT?</b>\n"
    "ü§ñ –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å —Å–æ–∑–¥–∞–Ω—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º–∏, –∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ò–ò-–∫–ª–∏–µ–Ω—Ç–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ, —Å —É—á—ë—Ç–æ–º —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, —ç–º–æ—Ü–∏–π –∏ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–∏.\n\n"
    "‚ùì <b>–ó–∞–º–µ–Ω—è–µ—Ç –ª–∏ —ç—Ç–æ —Å—É–ø–µ—Ä–≤–∏–∑–∏—é?</b>\n"
    "üß† –ù–µ—Ç, —ç—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –ù–æ –æ–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ –∏ –ª—É—á—à–µ —Å–µ–±—è –ø–æ–Ω–∏–º–∞—Ç—å.\n\n"
)

def help_detail_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîò –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é", callback_data="help_start_session")],
        [InlineKeyboardButton(text="üìÑ –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ —Å–µ—Å—Å–∏–∏", callback_data="help_after_session")],
        [InlineKeyboardButton(text="üí° –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="help_faq")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="support_contact")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ])

def help_back_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="help")]
    ])

def back_to_main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ])

# --- Handlers ---

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    async with async_session() as session:
        stmt = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(stmt)
        db_user = result.scalar_one_or_none()
        if not db_user:
            db_user = User(telegram_id=message.from_user.id, username=message.from_user.username)
            session.add(db_user)
            await session.commit()
        if db_user.is_new:
            text = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ AI-—Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤.\n\n"
                "–Ø ‚Äî –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ —Ö–æ—Ä–æ—à–æ –∑–Ω–∞—é, –∫–∞–∫ —Å–ª–æ–∂–Ω–æ –±—ã–≤–∞–µ—Ç –Ω–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É: –ø–µ—Ä–≤—ã–π –∫–ª–∏–µ–Ω—Ç, —Å—Ç—Ä–∞—Ö –Ω–∞–≤—Ä–µ–¥–∏—Ç—å, —Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º. –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
                "üß† –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
                "‚Äì –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∂–∏–≤–æ–º –¥–∏–∞–ª–æ–≥–µ —Å –ò–ò-–∫–ª–∏–µ–Ω—Ç–æ–º,\n"
                "‚Äì –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ç–µ–º—É –∑–∞–ø—Ä–æ—Å–∞,\n"
                "‚Äì –ø–æ–ª—É—á–∞—Ç—å —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ ‚Äî —Å —Ä–∞–∑–±–æ—Ä–æ–º, —á—Ç–æ –±—ã–ª–æ —Ö–æ—Ä–æ—à–æ, –∞ –≥–¥–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ—Å—Ç—É–ø–∏—Ç—å –∏–Ω–∞—á–µ.\n\n"
                "ü§î –ü–æ—á–µ–º—É –Ω–µ –ø—Ä–æ—Å—Ç–æ ChatGPT? –£ –Ω–∞—Å ‚Äî —Ä–µ–∞–ª–∏–∑–º, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ, —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ —ç–º–æ—Ü–∏–∏.\n\n"
                "üéÅ –î–æ—Å—Ç—É–ø–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è. –ù–∞—á–Ω–µ–º?"
            )
            db_user.is_new = False
            await session.commit()
        else:
            text = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ üå±\n\n"
                "–¢—ã –º–æ–∂–µ—à—å:\n"
                "üîπ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é\n"
                "üîπ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—à–ª—ã–µ –æ—Ç—á—ë—Ç—ã\n"
                "üîπ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
                "üîπ –ò–∑—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n\n"
                "–ì–æ—Ç–æ–≤(–∞) –∫ –Ω–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ?"
            )
    await message.answer(text, reply_markup=main_menu())
    await state.set_state(MainMenu.choosing)

# --- Help submenu ---

@dp.callback_query(lambda c: c.data.startswith("help"))
async def help_pages_handler(callback: types.CallbackQuery):
    await callback.answer()
    match callback.data:
        case "help":
            await callback.message.edit_text(HELP_MAIN_TEXT, reply_markup=help_detail_keyboard())
        case "help_start_session":
            await callback.message.edit_text(HELP_START_SESSION_TEXT, reply_markup=help_back_keyboard())
        case "help_after_session":
            await callback.message.edit_text(HELP_AFTER_SESSION_TEXT, reply_markup=help_back_keyboard())
        case "help_faq":
            await callback.message.edit_text(HELP_FAQ_TEXT, reply_markup=help_back_keyboard())
        case "help_how_to" | "help_supervision" | "help_client_choice" | "help_payment":
            await callback.message.edit_text("üîß –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!", reply_markup=help_back_keyboard())

    
@dp.callback_query(lambda c: c.data == "cancel_feedback")
async def cancel_feedback_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
    await state.set_state(MainMenu.choosing)
    
async def acknowledge_user_feedback(
    message: types.Message,
    state: FSMContext,
    success_text: str
):
    data = await state.get_data()
    msg_id = data.get("feedback_msg_id")
    try:
        if msg_id:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=msg_id,
                text=success_text,
                reply_markup=back_to_main_keyboard()
            )
        await asyncio.sleep(1.5)
        await message.delete()  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ acknowledge: {e}")
    await state.set_state(MainMenu.choosing)    

@dp.message(MainMenu.feedback)
async def handle_feedback(message: types.Message, state: FSMContext):
    await acknowledge_user_feedback(
        message, state,
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤! –û–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ üíõ"
    )

@dp.message(MainMenu.suggestion)
async def handle_suggestion(message: types.Message, state: FSMContext):
    await acknowledge_user_feedback(
        message, state,
        "üß† –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º üí´"
    )

@dp.message(MainMenu.error_report)
async def handle_error(message: types.Message, state: FSMContext):
    await acknowledge_user_feedback(
        message, state,
        "üöë –û—à–∏–±–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–æ–æ–±—â–∏–ª(–∞)."
    )
    
@dp.callback_query(MainMenu.choosing)
async def handle_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    match callback.data:
        case "start_session":
            await callback.message.edit_text("üß± –í—ã–±–æ—Ä —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=free_session_resistance_menu())
            await state.set_state(MainMenu.free_session_resistance)
        case "profile":
            async with async_session() as session:
                # –ó–¥–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                user_data = {
                    "username": callback.from_user.username or "unknown",
                    "telegram_id": callback.from_user.id,
                    "registered_at": "10 –º–∞—è 2025",
                    "active_tariff": "–ü–æ–¥–ø–∏—Å–∫–∞ \"–ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ 30 –¥–Ω–µ–π\"",
                    "tariff_expires": "17 –∏—é–ª—è 2025",
                    "sessions_done": 14,
                    "last_scenario": "–ì—Ä–∞–Ω–∏—Ü—ã / –í—ã—Å–æ–∫–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ",
                }
            await callback.message.edit_text(profile_text(user_data), reply_markup=profile_keyboard())
        case "referral":
            await callback.message.edit_text(referral_text(), reply_markup=referral_keyboard())
        case "feedback_menu":
            await callback.message.edit_text("üí¨ –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\nüó£ –ù–∞–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ!\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:", reply_markup=feedback_menu())
        case "leave_feedback":
            await callback.message.edit_text(
                "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üîô –û—Ç–º–µ–Ω–∞¬ª:",
                reply_markup=cancel_feedback_keyboard()
            )
            await state.update_data(feedback_msg_id=callback.message.message_id)
            await state.set_state(MainMenu.feedback)

        case "suggest_feature":
            await callback.message.edit_text(
                "üí° –ù–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üîô –û—Ç–º–µ–Ω–∞¬ª:",
                reply_markup=cancel_feedback_keyboard()
            )
            await state.update_data(feedback_msg_id=callback.message.message_id)
            await state.set_state(MainMenu.suggestion)

        case "report_error":
            await callback.message.edit_text(
                "‚ö†Ô∏è –û–ø–∏—à–∏ –æ—à–∏–±–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üîô –û—Ç–º–µ–Ω–∞¬ª:",
                reply_markup=cancel_feedback_keyboard()
            )
            await state.update_data(feedback_msg_id=callback.message.message_id)
            await state.set_state(MainMenu.error_report)
        case "back_main":
            await callback.message.edit_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
            await state.set_state(MainMenu.choosing)
        case "help":
            await callback.message.edit_text(HELP_MAIN_TEXT, reply_markup=help_detail_keyboard())
        case _:
            await callback.message.edit_text(f"üîß –ó–∞–≥–ª—É—à–∫–∞: {callback.data}\n(–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", reply_markup=main_menu())

# --- Free session flow ---

@dp.callback_query(MainMenu.free_session_resistance)
async def free_session_resistance_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data in ["resistance_medium", "resistance_high"]:
        await state.update_data(resistance=callback.data)
        await callback.message.edit_text("üí• –í—ã–±–æ—Ä —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=free_session_emotion_menu())
        await state.set_state(MainMenu.free_session_emotion)
    elif callback.data == "back_main":
        await callback.message.edit_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
        await state.set_state(MainMenu.choosing)

@dp.callback_query(MainMenu.free_session_emotion)
async def free_session_emotion_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data.startswith("emotion_"):
        await state.update_data(emotion=callback.data)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –æ–±—â–µ–Ω–∏—è:", reply_markup=free_session_format_menu())
        await state.set_state(MainMenu.free_session_format)
    elif callback.data == "back_to_resistance":
        await callback.message.edit_text("üß± –í—ã–±–æ—Ä —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=free_session_resistance_menu())
        await state.set_state(MainMenu.free_session_resistance)

@dp.callback_query(MainMenu.free_session_format)
async def free_session_format_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data in ["format_text", "format_audio"]:
        await state.update_data(format=callback.data)
        await callback.message.edit_text(
            "–ì–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é —Å –ò–ò-–∫–ª–∏–µ–Ω—Ç–æ–º?\n\n"
            "‚è± –£ —Ç–µ–±—è –µ—Å—Ç—å 20 –º–∏–Ω—É—Ç –Ω–∞ —Å–µ—Å—Å–∏—é.\n"
            "üìù –ü–æ –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–¥—ë—Ç —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–∏–π –æ—Ç—á—ë—Ç.\n"
            "‚ùó –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–Ω—å—à–µ ‚Äî –Ω–∞–∂–º–∏ ¬´üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é¬ª. –û—Ç—á—ë—Ç –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è.",
            reply_markup=free_session_confirm_menu()
        )
        await state.set_state(MainMenu.free_session_confirm)
    elif callback.data == "back_to_emotion":
        await callback.message.edit_text("üí• –í—ã–±–æ—Ä —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=free_session_emotion_menu())
        await state.set_state(MainMenu.free_session_emotion)

@dp.callback_query(MainMenu.free_session_confirm)
async def free_session_confirm_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "start_free_session":
        data = await state.get_data()
        # –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∏–∑ data, –∑–∞–≥–ª—É—à–∫–∞:
        await callback.message.edit_text(
            f"–°–µ—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
            f"–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {data.get('resistance')}\n"
            f"–≠–º–æ—Ü–∏—è: {data.get('emotion')}\n"
            f"–§–æ—Ä–º–∞—Ç: {data.get('format')}\n\n"
            "–£–¥–∞—á–∏! üéâ"
        )
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    elif callback.data == "end_free_session":
        await callback.message.edit_text("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ. –û—Ç—á—ë—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        await state.clear()
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
        await state.set_state(MainMenu.choosing)
    elif callback.data == "back_main":
        await callback.message.edit_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
        await state.set_state(MainMenu.choosing)

# --- Feedback, suggestion and error handling messages ---
@dp.message(MainMenu.feedback)
async def handle_feedback(message: types.Message, state: FSMContext):
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤! –û–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ üíõ")
    await state.set_state(MainMenu.choosing)

@dp.message(MainMenu.suggestion)
async def handle_suggestion(message: types.Message, state: FSMContext):
    await message.answer("üß† –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º üí´")
    await state.set_state(MainMenu.choosing)

@dp.message(MainMenu.error_report)
async def handle_error(message: types.Message, state: FSMContext):
    await message.answer("üöë –û—à–∏–±–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–æ–æ–±—â–∏–ª(–∞).")
    await state.set_state(MainMenu.choosing)

# --- Referral submenu ---
@dp.callback_query(lambda c: c.data in ["copy_referral_link", "my_referrals", "how_referral_works"])
async def referral_submenu_handler(callback: types.CallbackQuery):
    texts = {
        "copy_referral_link": "üìé –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞).",
        "my_referrals": "üìä –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞).",
        "how_referral_works": "‚ùì –ü–æ—è—Å–Ω–µ–Ω–∏–µ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞).",
    }
    await callback.answer(texts[callback.data], show_alert=True)

# --- DB Init ---
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# --- Entry Point ---
async def main():
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await init_db()
    try:
        await dp.start_polling(bot)
    finally:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    asyncio.run(main())
