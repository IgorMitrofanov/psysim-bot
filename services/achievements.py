from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from typing import Dict, List, Optional, Any
import datetime
from enum import Enum
import logging
from collections import defaultdict
from database.models import Achievement, User, Session, AchievementType, AchievementTier, Referral
from sqlalchemy.ext.asyncio import AsyncSession
from config import logger
from sqlalchemy.future import select
from sqlalchemy import func

class AchievementSystem:
    def __init__(self, bot, engine):
        self.bot = bot
        self.engine = engine
        self.async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
        self.achievement_config = {
            AchievementType.FIRST_SESSION: {
                AchievementTier.BRONZE: {'required': 1, 'points': 10}
            },
            AchievementType.SESSION_COUNT: {
                AchievementTier.BRONZE: {'required': 5, 'points': 20},
                AchievementTier.SILVER: {'required': 20, 'points': 50},
                AchievementTier.GOLD: {'required': 50, 'points': 100},
                AchievementTier.PLATINUM: {'required': 100, 'points': 200}
            },
            AchievementType.HIGH_RESISTANCE: {
                AchievementTier.BRONZE: {'required': 3, 'points': 30},
                AchievementTier.SILVER: {'required': 10, 'points': 70},
                AchievementTier.GOLD: {'required': 25, 'points': 150}
            },
            AchievementType.MONTHLY_CHALLENGE: {
                AchievementTier.BRONZE: {'required': 5, 'points': 30},
                AchievementTier.SILVER: {'required': 10, 'points': 70},
                AchievementTier.GOLD: {'required': 20, 'points': 150}
            },
            AchievementType.EMOTIONAL_EXPLORER: {
                AchievementTier.BRONZE: {'required': 3, 'points': 20},
                AchievementTier.SILVER: {'required': 10, 'points': 50},
                AchievementTier.GOLD: {'required': 20, 'points': 100}
            },
            AchievementType.PERSONA_COLLECTOR: {
                AchievementTier.BRONZE: {'required': 3, 'points': 30},
                AchievementTier.SILVER: {'required': 7, 'points': 70},
                AchievementTier.GOLD: {'required': 12, 'points': 150}
            },
            AchievementType.THERAPY_MARATHON: {
                AchievementTier.BRONZE: {'required': 3, 'points': 30},  # 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥
                AchievementTier.SILVER: {'required': 7, 'points': 70},  # 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
                AchievementTier.GOLD: {'required': 30, 'points': 200}   # 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
            },
            AchievementType.FEEDBACK_CONTRIBUTOR: {
                AchievementTier.BRONZE: {'required': 1, 'points': 10},
                AchievementTier.SILVER: {'required': 3, 'points': 30},
                AchievementTier.GOLD: {'required': 10, 'points': 100}
            },
            AchievementType.NIGHT_OWL: {
                AchievementTier.BRONZE: {'required': 3, 'points': 20},
                AchievementTier.SILVER: {'required': 10, 'points': 50},
                AchievementTier.GOLD: {'required': 20, 'points': 100}
            },
            AchievementType.WEEKEND_WARRIOR: {
                AchievementTier.BRONZE: {'required': 3, 'points': 20},
                AchievementTier.SILVER: {'required': 10, 'points': 50},
                AchievementTier.GOLD: {'required': 20, 'points': 100}
            },
            AchievementType.EMOTION_MASTER: {
                AchievementTier.BRONZE: {'required': 5, 'points': 30},
                AchievementTier.SILVER: {'required': 15, 'points': 70},
                AchievementTier.GOLD: {'required': 30, 'points': 150}
            },
            AchievementType.TIME_TRAVELER: {
                AchievementTier.BRONZE: {'required': 4, 'points': 30},  # –í—Å–µ –ø–µ—Ä–∏–æ–¥—ã –¥–Ω—è
                AchievementTier.SILVER: {'required': 10, 'points': 70}, # 10 —Ä–∞–∑ –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã
                AchievementTier.GOLD: {'required': 30, 'points': 150}  # 30 —Ä–∞–∑ –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã
            },
            AchievementType.REFERRAL_MASTER: {
                AchievementTier.BRONZE: {'required': 1, 'points': 20},
                AchievementTier.SILVER: {'required': 5, 'points': 100},
                AchievementTier.GOLD: {'required': 10, 'points': 200}
            }
        }
    
    async def check_achievements(self, user_id: int, achievement_type: AchievementType, progress_increment: int = 1) -> List[Achievement]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.async_session() as session:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await session.execute(
                    select(Achievement)
                    .filter(
                        Achievement.user_id == user_id,
                        Achievement.badge_code == achievement_type
                    )
                )
                user_achievements = result.scalars().all()
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                current_progress = defaultdict(int)
                for ach in user_achievements:
                    current_progress[ach.tier] = ach.progress
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                config = self.achievement_config.get(achievement_type, {})
                new_achievements = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                for tier, requirements in config.items():
                    required = requirements['required']
                    points = requirements['points']
                    
                    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if any(ach.tier == tier for ach in user_achievements):
                        continue
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    progress = current_progress.get(tier, 0) + progress_increment
                    
                    # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–≥ –∏–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª —Ç—Ä–µ–±—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    if progress >= required:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                        new_ach = Achievement(
                            user_id=user_id,
                            badge_code=achievement_type,
                            tier=tier,
                            progress=100,
                            points=points,
                            awarded_at=datetime.datetime.utcnow()
                        )
                        session.add(new_ach)
                        new_achievements.append(new_ach)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await self._notify_user(user_id, achievement_type, tier)
                
                await session.commit()
                return new_achievements
                
            except Exception as e:
                await session.rollback()
                logger.error(f"Error checking achievements: {e}", exc_info=True)
                return []
    
    async def _notify_user(self, user_id: int, achievement_type: AchievementType, tier: AchievementTier):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏"""
        try:
            async with self.async_session() as session:
                result = await session.execute(
                    select(User).filter(User.id == user_id)
                )
                user = result.scalar_one_or_none()
                
                if not user:
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                achievement_name = self._get_achievement_name(achievement_type)
                tier_name = self._get_tier_name(tier)
                
                message = (
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n\n"
                    f"üèÜ <b>{achievement_name} ({tier_name})</b>\n\n"
                    f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.send_message(chat_id=user.telegram_id, text=message, parse_mode='HTML')
                
        except Exception as e:
            logger.error(f"Error notifying user about achievement: {e}")
    
    def _get_achievement_name(self, achievement_type: AchievementType) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        names = {
            AchievementType.FIRST_SESSION: "–ü–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è",
            AchievementType.SESSION_COUNT: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π",
            AchievementType.HIGH_RESISTANCE: "–í—ã—Å–æ–∫–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ",
            AchievementType.MONTHLY_CHALLENGE: "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂",
            AchievementType.EMOTIONAL_EXPLORER: "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —ç–º–æ—Ü–∏–π",
            AchievementType.PERSONA_COLLECTOR: "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –ø–µ—Ä—Å–æ–Ω",
            AchievementType.THERAPY_MARATHON: "–ú–∞—Ä–∞—Ñ–æ–Ω —Ç–µ—Ä–∞–ø–∏–∏",
            AchievementType.FEEDBACK_CONTRIBUTOR: "–ö–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏",
            AchievementType.NIGHT_OWL: "–ù–æ—á–Ω–∞—è —Å–æ–≤–∞",
            AchievementType.WEEKEND_WARRIOR: "–í–æ–∏—Ç–µ–ª—å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è",
            AchievementType.EMOTION_MASTER: "–ú–∞—Å—Ç–µ—Ä —ç–º–æ—Ü–∏–π",
            AchievementType.TIME_TRAVELER: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–∏",
            AchievementType.REFERRAL_MASTER: "–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"
        }
        return names.get(achievement_type, "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ")
    
    def _get_tier_name(self, tier: AchievementTier) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        names = {
            AchievementTier.BRONZE: "–ë—Ä–æ–Ω–∑–∞",
            AchievementTier.SILVER: "–°–µ—Ä–µ–±—Ä–æ",
            AchievementTier.GOLD: "–ó–æ–ª–æ—Ç–æ",
            AchievementTier.PLATINUM: "–ü–ª–∞—Ç–∏–Ω–∞"
        }
        return names.get(tier, "")
    
    async def check_session_achievements(self, user_id: int, session_data: Dict):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–µ—Å—Å–∏—è–º–∏"""
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é
            await self.check_achievements(user_id, AchievementType.FIRST_SESSION)
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
            await self.check_achievements(user_id, AchievementType.SESSION_COUNT)
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º
            if session_data.get('resistance_level') == 'high':
                await self.check_achievements(user_id, AchievementType.HIGH_RESISTANCE)
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç–º–æ—Ü–∏—è–º–∏
            if session_data.get('emotional'):
                await self.check_achievements(user_id, AchievementType.EMOTIONAL_EXPLORER)
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω
            if session_data.get('persona_id'):
                await self.check_achievements(user_id, AchievementType.PERSONA_COLLECTOR)
            
            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ (–¥–ª—è Night Owl –∏ Time Traveler)
            session_time = session_data.get('started_at')
            if session_time:
                hour = session_time.hour
                # –ù–æ—á–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (00:00 - 05:00)
                if 0 <= hour < 5:
                    await self.check_achievements(user_id, AchievementType.NIGHT_OWL)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã –¥–Ω—è –¥–ª—è Time Traveler
                period = self._get_time_period(hour)
                await self.check_achievements(user_id, AchievementType.TIME_TRAVELER)
            
            # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–¥–ª—è Weekend Warrior)
            if session_time and session_time.weekday() >= 5:  # –°—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                await self.check_achievements(user_id, AchievementType.WEEKEND_WARRIOR)
            
            # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ (–¥–ª—è Therapy Marathon)
            await self._check_consecutive_days(user_id)
            
        except Exception as e:
            logger.error(f"Error checking session achievements: {e}")
    
    def _get_time_period(self, hour: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥ –¥–Ω—è –ø–æ —á–∞—Å–∞–º"""
        if 5 <= hour < 12:
            return "morning"
        elif 12 <= hour < 17:
            return "afternoon"
        elif 17 <= hour < 22:
            return "evening"
        else:
            return "night"
    
    async def _check_consecutive_days(self, user_id: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ —Å —Å–µ—Å—Å–∏—è–º–∏"""
        async with self.async_session() as session:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
                result = await session.execute(
                    select(Session)
                    .filter(Session.user_id == user_id)
                    .order_by(Session.started_at)
                )
                sessions = result.scalars().all()
                
                if not sessions:
                    return
                
                # –°—á–∏—Ç–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å —Å–µ—Å—Å–∏—è–º–∏
                max_consecutive = 1
                current_consecutive = 1
                prev_date = sessions[0].started_at.date()
                
                for session in sessions[1:]:
                    current_date = session.started_at.date()
                    delta = (current_date - prev_date).days
                    
                    if delta == 1:  # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏
                        current_consecutive += 1
                        if current_consecutive > max_consecutive:
                            max_consecutive = current_consecutive
                    elif delta > 1:  # –†–∞–∑—Ä—ã–≤ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        current_consecutive = 1
                    
                    prev_date = current_date
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è Therapy Marathon
                if max_consecutive >= 3:
                    progress = min(max_consecutive, 30)  # –ú–∞–∫—Å–∏–º—É–º 30 –¥–ª—è –ø–ª–∞—Ç–æ
                    await self.check_achievements(
                        user_id, 
                        AchievementType.THERAPY_MARATHON, 
                        progress_increment=progress
                    )
                
            except Exception as e:
                logger.error(f"Error checking consecutive days: {e}")
    
    async def check_feedback_achievements(self, user_id: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é"""
        await self.check_achievements(user_id, AchievementType.FEEDBACK_CONTRIBUTOR)
    
    async def check_referral_achievements(self, user_id: int, new_referrals_count: int = 1):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏"""
        await self.check_achievements(
            user_id, 
            AchievementType.REFERRAL_MASTER, 
            progress_increment=new_referrals_count
        )
    
    async def get_user_achievements(self, user_id: int) -> Dict[AchievementType, List[Achievement]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É"""
        async with self.async_session() as session:
            result = await session.execute(
                select(Achievement)
                .filter(Achievement.user_id == user_id)
                .order_by(Achievement.awarded_at.desc())
            )
            achievements = result.scalars().all()
            
            grouped = defaultdict(list)
            for ach in achievements:
                grouped[ach.badge_code].append(ach)
            
            return dict(grouped)
    
    async def get_user_progress(self, user_id: int) -> Dict[AchievementType, Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º"""
        result = {}
        async with self.async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_count = (await session.execute(
                select(func.count()).select_from(Session)
                .filter(Session.user_id == user_id)
            )).scalar()
            
            high_resistance = (await session.execute(
                select(func.count()).select_from(Session)
                .filter(
                    Session.user_id == user_id,
                    Session.resistance_level == 'high'
                )
            )).scalar()
            
            referrals = (await session.execute(
                select(func.count()).select_from(Referral)
                .filter(Referral.inviter_id == user_id)
            )).scalar()
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            for ach_type in AchievementType:
                progress_info = {
                    'current_tier': None,
                    'next_tier': None,
                    'current_progress': 0,
                    'next_progress_required': 0
                }
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                if ach_type == AchievementType.SESSION_COUNT:
                    progress_info['current_progress'] = session_count or 0
                elif ach_type == AchievementType.HIGH_RESISTANCE:
                    progress_info['current_progress'] = high_resistance or 0
                elif ach_type == AchievementType.REFERRAL_MASTER:
                    progress_info['current_progress'] = referrals or 0
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
                config = self.achievement_config.get(ach_type, {})
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
                achievements_result = await session.execute(
                    select(Achievement)
                    .filter(
                        Achievement.user_id == user_id,
                        Achievement.badge_code == ach_type
                    )
                )
                achieved = achievements_result.scalars().all()
                
                achieved_tiers = {a.tier for a in achieved}
                for tier in [AchievementTier.PLATINUM, AchievementTier.GOLD, 
                            AchievementTier.SILVER, AchievementTier.BRONZE]:
                    if tier in config and tier in achieved_tiers:
                        progress_info['current_tier'] = tier
                        break
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
                if progress_info['current_tier']:
                    tiers = list(config.keys())
                    current_idx = tiers.index(progress_info['current_tier'])
                    if current_idx + 1 < len(tiers):
                        progress_info['next_tier'] = tiers[current_idx + 1]
                        progress_info['next_progress_required'] = config[progress_info['next_tier']]['required']
                else:
                    if config:
                        progress_info['next_tier'] = list(config.keys())[0]
                        progress_info['next_progress_required'] = config[progress_info['next_tier']]['required']
                
                result[ach_type] = progress_info
        
        return result