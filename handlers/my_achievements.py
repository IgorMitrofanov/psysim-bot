from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.models import Achievement, AchievementType, AchievementTier
from sqlalchemy import select
from sqlalchemy.orm import joinedload
from aiogram import Router, types
from sqlalchemy.ext.asyncio import AsyncSession
from database.crud import get_user
from services.achievements import AchievementSystem
from keyboards.builder import profile_keyboard


router = Router(name="my_achievements")

@router.callback_query(lambda c: c.data == "my_achievements")
async def my_achievements_handler(callback: types.CallbackQuery, session: AsyncSession, achievement_system: AchievementSystem):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = await get_user(session, telegram_id=callback.from_user.id)
    if not db_user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stmt = select(Achievement).where(
        Achievement.user_id == db_user.id
    ).order_by(
        Achievement.awarded_at.desc()
    )
    result = await session.execute(stmt)
    achievements = result.scalars().all()

    if not achievements:
        await callback.message.edit_text(
            "üéñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, —á—Ç–æ–±—ã –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!",
            reply_markup=profile_keyboard()
        )
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
    achievements_by_type = {}
    for ach in achievements:
        if ach.badge_code not in achievements_by_type:
            achievements_by_type[ach.badge_code] = []
        achievements_by_type[ach.badge_code].append(ach)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = "üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    progress_data = await achievement_system.get_user_progress(db_user.id) if achievement_system else {}

    for ach_type, ach_list in achievements_by_type.items():
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress_info = progress_data.get(ach_type, {})
        next_tier = progress_info.get('next_tier')
        next_required = progress_info.get('next_progress_required', 0)
        current_progress = progress_info.get('current_progress', 0)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é (–æ—Ç –±—Ä–æ–Ω–∑—ã –∫ –ø–ª–∞—Ç–∏–Ω–µ)
        ach_list.sort(key=lambda x: x.tier.value)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        type_name = achievement_system._get_achievement_name(ach_type) if achievement_system else ach_type.value
        message_text += f"<b>{type_name}</b>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
        for ach in ach_list:
            tier_name = achievement_system._get_tier_name(ach.tier) if achievement_system else ach.tier.value
            message_text += f"  - {tier_name} üèÖ (–ø–æ–ª—É—á–µ–Ω–æ {ach.awarded_at.strftime('%d.%m.%Y')})\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
        if next_tier:
            tier_name = achievement_system._get_tier_name(next_tier) if achievement_system else next_tier.value
            message_text += (
                f"  ‚ûî –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ {tier_name}: {current_progress}/{next_required}\n"
            )
        message_text += "\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")],
    ])

    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )