from aiogram import Router, types, Bot
from sqlalchemy.ext.asyncio import AsyncSession
from database.crud import get_user
from database.models import TariffType
from keyboards.builder import subscription_keyboard
from keyboards.builder import profile_keyboard
from texts.subscription_texts import (
    TARIFF_MENU_TEXT,
    TARIFF_SUCCESS_TEMPLATE,
    TARIFF_FAIL_FUNDS,
    TARIFF_USER_NOT_FOUND,
    UNKNOWN_TARIFF
)
from config import config, logger
import datetime
from database.models import Order
from services.referral_manager import process_referral_bonus_after_payment

router = Router(name="subscription")


@router.callback_query(lambda c: c.data == "buy")
async def buy_tariff_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        TARIFF_MENU_TEXT,
        reply_markup=subscription_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data.startswith("activate_"))
async def activate_tariff_callback(callback: types.CallbackQuery, session: AsyncSession, bot: Bot):
     # callback.data: activate_start, activate_pro, activate_unlimited
    key = callback.data.removeprefix("activate_")
    if key not in config.TARIFF_MAP:
        await callback.answer(UNKNOWN_TARIFF, show_alert=True)
        return
    
    tariff_name, cost, days, _ = config.TARIFF_MAP[key]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π enum-–æ–±—ä–µ–∫—Ç
    try:
        tariff_enum = TariffType[key.upper()]
    except KeyError:
        await callback.answer(UNKNOWN_TARIFF, show_alert=True)
        return

    user = await get_user(session, telegram_id=callback.from_user.id)
    if not user:
        await callback.answer(TARIFF_USER_NOT_FOUND, show_alert=True)
        return

    if user.balance < cost:
        await callback.answer(TARIFF_FAIL_FUNDS, show_alert=True)
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ
    user.balance -= cost
    user.active_tariff = tariff_enum  # –ò—Å–ø–æ–ª—å–∑—É–µ–º enum –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
    user.tariff_expires = datetime.datetime.utcnow() + datetime.timedelta(days=days)

    # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ
    order_description = f"–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ ¬´{tariff_name}¬ª –Ω–∞ {days} –¥–Ω–µ–π"
    order = Order(
        user_id=user.id,
        description=order_description,
        price=cost,
        date=datetime.datetime.utcnow()
    )
    session.add(order)

    await process_referral_bonus_after_payment(session, user.id, bot)

    await session.commit()

    text = TARIFF_SUCCESS_TEMPLATE.format(tariff=tariff_name.capitalize(), days=days, cost=cost)
    # –û—Ç–≤–µ—Ç–∏—Ç—å –≤ —á–∞—Ç —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—è
    await callback.message.edit_text(text, reply_markup=profile_keyboard())
    await callback.answer()
    
    
    
# from utils.payment import generate_sbp_link  # —Ç–≤–æ–π –º–æ–¥—É–ª—å
# from database.models import Order
# import uuid

# @router.callback_query(lambda c: c.data.startswith("activate_"))
# async def initiate_payment(callback: types.CallbackQuery, session: AsyncSession):
#     tariff_map = {
#         "activate_start": ("start", 590, 7),
#         "activate_pro": ("pro", 1490, 30),
#         "activate_unlimited": ("unlimited", 2490, 30)
#     }

#     data = callback.data
#     if data not in tariff_map:
#         await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
#         return

#     tariff_code, cost, days = tariff_map[data]
#     user = await get_user(session, telegram_id=callback.from_user.id)
#     if not user:
#         await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
#         return

#     order_id = str(uuid.uuid4())
#     description = f"–¢–∞—Ä–∏—Ñ ¬´{tariff_code}¬ª –Ω–∞ {days} –¥–Ω–µ–π"

#     # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏/QR
#     payment_url = generate_sbp_link(order_id=order_id, amount=cost, user_id=user.id)

#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ (–≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã)
#     order = Order(
#         id=order_id,
#         user_id=user.id,
#         description=description,
#         price=cost
#     )
#     session.add(order)
#     await session.commit()

#     await callback.message.edit_text(
#         f"üí≥ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ {cost} ‚ÇΩ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n\n"
#         f"<a href=\"{payment_url}\">{payment_url}</a>\n\n"
#         f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
#         parse_mode="HTML"
#     )
#     await callback.answer()


# def generate_sbp_link(order_id: str, amount: int, user_id: int) -> str:
#     return (
#         f"https://pay.example.com/create?"
#         f"order_id={order_id}&amount={amount}&user_id={user_id}"
#     )
    
# @router.post("/webhook/payment")
# async def payment_webhook(
#     request: Request,
#     session: AsyncSession = Depends(get_session)
# ):
#     data = await request.json()

#     order_id = data.get("order_id")
#     status = data.get("status")
#     amount = data.get("amount")
#     telegram_id = data.get("telegram_id")  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—ë—à—å

#     # 1. –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑
#     stmt = select(Order).where(Order.id == order_id)
#     result = await session.execute(stmt)
#     order = result.scalar_one_or_none()

#     if not order:
#         return {"ok": False, "error": "Order not found"}

#     # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å
#     if status == "success" and order.status != "paid":
#         order.status = "paid"

#         # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         user = await session.get(User, order.user_id)
#         if user:
#             # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ description
#             if "start" in order.description.lower():
#                 user.active_tariff = "start"
#                 user.tariff_expires = datetime.datetime.utcnow() + datetime.timedelta(days=7)
#             elif "pro" in order.description.lower():
#                 user.active_tariff = "pro"
#                 user.tariff_expires = datetime.datetime.utcnow() + datetime.timedelta(days=30)
#             elif "unlimited" in order.description.lower():
#                 user.active_tariff = "unlimited"
#                 user.tariff_expires = datetime.datetime.utcnow() + datetime.timedelta(days=30)

#             # 4. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
#             try:
#                 await bot.send_message(
#                     chat_id=user.telegram_id,
#                     text=f"‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω!\n–ü–æ–¥–ø–∏—Å–∫–∞ ¬´{user.active_tariff.capitalize()}¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞."
#                 )
#             except Exception as e:
#                 print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

#     await session.commit()
#     return {"ok": True}