from aiogram import Router, types, Bot
from sqlalchemy.ext.asyncio import AsyncSession
from database.crud import get_user
from database.models import TariffType
from keyboards.builder import subscription_keyboard
from keyboards.builder import profile_keyboard
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import select
from sqlalchemy.ext.asyncio import async_sessionmaker
from database.models import Tariff
from texts.subscription_texts import (
    get_tariff_menu_text,
    TARIFF_FAIL_FUNDS,
    TARIFF_USER_NOT_FOUND,
    UNKNOWN_TARIFF
)
from config import config, logger
import datetime
from database.models import Order
from services.referral_manager import process_referral_bonus_after_payment

router = Router(name="subscription")


@router.callback_query(lambda c: c.data == "buy")
async def buy_tariff_menu(callback: types.CallbackQuery, session: AsyncSession):
    await callback.message.edit_text(
        await get_tariff_menu_text(session),
        reply_markup=await subscription_keyboard(session),
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data.startswith("activate_"))
async def activate_tariff_callback(
    callback: types.CallbackQuery, 
    session: AsyncSession, 
    bot: Bot
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –∏–∑ callback
        tariff_key = callback.data.removeprefix("activate_")
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ Enum –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ –ë–î
            tariff_enum = TariffType(tariff_key)
        except ValueError:
            logger.warning(f"Invalid tariff key: {tariff_key}")
            await callback.answer(UNKNOWN_TARIFF, show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        tariff = await session.execute(
            select(Tariff)
            .where(Tariff.name == tariff_enum)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Enum –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            .where(Tariff.is_active == True)
        )
        tariff = tariff.scalar_one_or_none()
        
        if not tariff:
            logger.warning(f"Tariff not found: {tariff_key}")
            await callback.answer(UNKNOWN_TARIFF, show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user(session, telegram_id=callback.from_user.id)
        if not user:
            await callback.answer(TARIFF_USER_NOT_FOUND, show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user.balance < tariff.price:
            await callback.answer(TARIFF_FAIL_FUNDS, show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É–ø–∏—Ç—å —Ç–æ—Ç –∂–µ —Ç–∞—Ä–∏—Ñ
        if user.active_tariff == tariff_enum and user.tariff_expires > datetime.utcnow():
            days_left = (user.tariff_expires - datetime.utcnow()).days
            await callback.answer(
                f"–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ! –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π",
                show_alert=True
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.balance -= tariff.price
        user.active_tariff = tariff_enum
        user.tariff_expires = datetime.datetime.utcnow() + datetime.timedelta(days=tariff.duration_days)
        user.subscription_warning_sent = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ
        order = Order(
            user_id=user.id,
            description=f"–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ ¬´{tariff.display_name}¬ª",
            price=tariff.price,
            date=datetime.datetime.utcnow(),
            tariff_id=tariff.id
        )
        session.add(order)

        # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
        await process_referral_bonus_after_payment(session, user.id, bot)

        await session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_text = (
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ ¬´{tariff.display_name}¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
            f"‚ñ∏ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {tariff.duration_days} –¥–Ω–µ–π\n"
            f"‚ñ∏ –°–µ—Å—Å–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ: {tariff.session_quota if tariff.session_quota < 999 else '–±–µ–∑–ª–∏–º–∏—Ç'}\n"
            f"‚ñ∏ –°–ø–∏—Å–∞–Ω–æ: {tariff.price // 100} ‚ÇΩ\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é!"
        )

        await callback.message.edit_text(
            success_text,
            reply_markup=profile_keyboard()
        )
        await callback.answer()

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É
        logger.info(f"User {user.telegram_id} activated tariff {tariff.name}")

    except Exception as e:
        logger.error(f"Error activating tariff: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        await session.rollback()
    
    
    
# from utils.payment import generate_sbp_link  # —Ç–≤–æ–π –º–æ–¥—É–ª—å
# from database.models import Order
# import uuid

# @router.callback_query(lambda c: c.data.startswith("activate_"))
# async def initiate_payment(callback: types.CallbackQuery, session: AsyncSession):
#     tariff_map = {
#         "activate_start": ("start", 590, 7),
#         "activate_pro": ("pro", 1490, 30),
#         "activate_unlimited": ("unlimited", 2490, 30)
#     }

#     data = callback.data
#     if data not in tariff_map:
#         await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
#         return

#     tariff_code, cost, days = tariff_map[data]
#     user = await get_user(session, telegram_id=callback.from_user.id)
#     if not user:
#         await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
#         return

#     order_id = str(uuid.uuid4())
#     description = f"–¢–∞—Ä–∏—Ñ ¬´{tariff_code}¬ª –Ω–∞ {days} –¥–Ω–µ–π"

#     # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏/QR
#     payment_url = generate_sbp_link(order_id=order_id, amount=cost, user_id=user.id)

#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ (–≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã)
#     order = Order(
#         id=order_id,
#         user_id=user.id,
#         description=description,
#         price=cost
#     )
#     session.add(order)
#     await session.commit()

#     await callback.message.edit_text(
#         f"üí≥ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ {cost} ‚ÇΩ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n\n"
#         f"<a href=\"{payment_url}\">{payment_url}</a>\n\n"
#         f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
#         parse_mode="HTML"
#     )
#     await callback.answer()


# def generate_sbp_link(order_id: str, amount: int, user_id: int) -> str:
#     return (
#         f"https://pay.example.com/create?"
#         f"order_id={order_id}&amount={amount}&user_id={user_id}"
#     )
    
# @router.post("/webhook/payment")
# async def payment_webhook(
#     request: Request,
#     session: AsyncSession = Depends(get_session)
# ):
#     data = await request.json()

#     order_id = data.get("order_id")
#     status = data.get("status")
#     amount = data.get("amount")
#     telegram_id = data.get("telegram_id")  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—ë—à—å

#     # 1. –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑
#     stmt = select(Order).where(Order.id == order_id)
#     result = await session.execute(stmt)
#     order = result.scalar_one_or_none()

#     if not order:
#         return {"ok": False, "error": "Order not found"}

#     # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å
#     if status == "success" and order.status != "paid":
#         order.status = "paid"

#         # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         user = await session.get(User, order.user_id)
#         if user:
#             # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ description
#             if "start" in order.description.lower():
#                 user.active_tariff = "start"
#                 user.tariff_expires = datetime.datetime.utcnow() + datetime.timedelta(days=7)
#             elif "pro" in order.description.lower():
#                 user.active_tariff = "pro"
#                 user.tariff_expires = datetime.datetime.utcnow() + datetime.timedelta(days=30)
#             elif "unlimited" in order.description.lower():
#                 user.active_tariff = "unlimited"
#                 user.tariff_expires = datetime.datetime.utcnow() + datetime.timedelta(days=30)

#             # 4. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
#             try:
#                 await bot.send_message(
#                     chat_id=user.telegram_id,
#                     text=f"‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω!\n–ü–æ–¥–ø–∏—Å–∫–∞ ¬´{user.active_tariff.capitalize()}¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞."
#                 )
#             except Exception as e:
#                 print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

#     await session.commit()
#     return {"ok": True}