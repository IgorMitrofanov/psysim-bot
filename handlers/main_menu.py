from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards import (
    main_menu,
    free_session_resistance_menu,
    profile_keyboard,
    referral_keyboard,
    feedback_menu,
    cancel_feedback_keyboard,
    help_detail_keyboard,
    back_to_main_keyboard,
    free_session_emotion_menu,
    free_session_format_menu,
    free_session_confirm_menu,
)
from states import MainMenu
from texts.common import profile_text, referral_text
from texts.feedback import HELP_MAIN_TEXT

router = Router()

@router.callback_query(MainMenu.choosing)
async def handle_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    match callback.data:
        case "start_session":
            await callback.message.edit_text(
                "üß± –í—ã–±–æ—Ä —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞",
                reply_markup=free_session_resistance_menu()
            )
            await state.set_state(MainMenu.free_session_resistance)

        case "profile":
            # –∑–∞–≥–ª—É—à–∫–∞
            user_data = {
                "username": callback.from_user.username or "unknown",
                "telegram_id": callback.from_user.id,
                "registered_at": "10 –º–∞—è 2025",
                "active_tariff": "–ü–æ–¥–ø–∏—Å–∫–∞ \"–ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ 30 –¥–Ω–µ–π\"",
                "tariff_expires": "17 –∏—é–ª—è 2025",
                "sessions_done": 14,
                "last_scenario": "–ì—Ä–∞–Ω–∏—Ü—ã / –í—ã—Å–æ–∫–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ",
            }
            await callback.message.edit_text(
                profile_text(user_data),
                reply_markup=profile_keyboard()
            )

        case "referral":
            await callback.message.edit_text(referral_text(), reply_markup=referral_keyboard())

        case "feedback_menu":
            await callback.message.edit_text(
                "üí¨ –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\nüó£ –ù–∞–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ!\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
                reply_markup=feedback_menu()
            )

        case "leave_feedback":
            await callback.message.edit_text(
                "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üîô –û—Ç–º–µ–Ω–∞¬ª:",
                reply_markup=cancel_feedback_keyboard()
            )
            await state.update_data(feedback_msg_id=callback.message.message_id)
            await state.set_state(MainMenu.feedback)

        case "suggest_feature":
            await callback.message.edit_text(
                "üí° –ù–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üîô –û—Ç–º–µ–Ω–∞¬ª:",
                reply_markup=cancel_feedback_keyboard()
            )
            await state.update_data(feedback_msg_id=callback.message.message_id)
            await state.set_state(MainMenu.suggestion)

        case "report_error":
            await callback.message.edit_text(
                "‚ö†Ô∏è –û–ø–∏—à–∏ –æ—à–∏–±–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üîô –û—Ç–º–µ–Ω–∞¬ª:",
                reply_markup=cancel_feedback_keyboard()
            )
            await state.update_data(feedback_msg_id=callback.message.message_id)
            await state.set_state(MainMenu.error_report)

        case "back_main":
            await callback.message.edit_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
            await state.set_state(MainMenu.choosing)

        case "help":
            await callback.message.edit_text(HELP_MAIN_TEXT, reply_markup=help_detail_keyboard())

        case _:
            await callback.message.edit_text(
                f"üîß –ó–∞–≥–ª—É—à–∫–∞: {callback.data}\n(–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                reply_markup=main_menu()
            )
