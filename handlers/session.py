from aiogram import Router, types
from aiogram.fsm.context import FSMContext

from states import MainMenu
from keyboards.builder import (
    free_session_resistance_menu,
    free_session_emotion_menu,
    free_session_format_menu,
    free_session_confirm_menu,
    main_menu
)

router = Router()

@router.callback_query(MainMenu.free_session_resistance)
async def free_session_resistance_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data in ["resistance_medium", "resistance_high"]:
        await state.update_data(resistance=callback.data)
        await callback.message.edit_text(
            "üí• –í—ã–±–æ—Ä —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞", 
            reply_markup=free_session_emotion_menu()
        )
        await state.set_state(MainMenu.free_session_emotion)
    elif callback.data == "back_main":
        await callback.message.edit_text(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            reply_markup=main_menu()
        )
        await state.set_state(MainMenu.choosing)

@router.callback_query(MainMenu.free_session_emotion)
async def free_session_emotion_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data.startswith("emotion_"):
        await state.update_data(emotion=callback.data)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –æ–±—â–µ–Ω–∏—è:", 
            reply_markup=free_session_format_menu()
        )
        await state.set_state(MainMenu.free_session_format)
    elif callback.data == "back_to_resistance":
        await callback.message.edit_text(
            "üß± –í—ã–±–æ—Ä —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞", 
            reply_markup=free_session_resistance_menu()
        )
        await state.set_state(MainMenu.free_session_resistance)

@router.callback_query(MainMenu.free_session_format)
async def free_session_format_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data in ["format_text", "format_audio"]:
        await state.update_data(format=callback.data)
        await callback.message.edit_text(
            "–ì–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é —Å –ò–ò-–∫–ª–∏–µ–Ω—Ç–æ–º?\n\n"
            "‚è± –£ —Ç–µ–±—è –µ—Å—Ç—å 20 –º–∏–Ω—É—Ç –Ω–∞ —Å–µ—Å—Å–∏—é.\n"
            "üìù –ü–æ –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–¥—ë—Ç —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–∏–π –æ—Ç—á—ë—Ç.\n"
            "‚ùó –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–Ω—å—à–µ ‚Äî –Ω–∞–∂–º–∏ ¬´üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é¬ª. –û—Ç—á—ë—Ç –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è.",
            reply_markup=free_session_confirm_menu()
        )
        await state.set_state(MainMenu.free_session_confirm)
    elif callback.data == "back_to_emotion":
        await callback.message.edit_text(
            "üí• –í—ã–±–æ—Ä —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞", 
            reply_markup=free_session_emotion_menu()
        )
        await state.set_state(MainMenu.free_session_emotion)

@router.callback_query(MainMenu.free_session_confirm)
async def free_session_confirm_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "start_free_session":
        data = await state.get_data()
        await callback.message.edit_text(
            f"–°–µ—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
            f"–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {data.get('resistance')}\n"
            f"–≠–º–æ—Ü–∏—è: {data.get('emotion')}\n"
            f"–§–æ—Ä–º–∞—Ç: {data.get('format')}\n\n"
            "–£–¥–∞—á–∏! üéâ"
        )
    elif callback.data == "end_free_session":
        await callback.message.edit_text("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ. –û—Ç—á—ë—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        await state.clear()
        await callback.message.answer(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            reply_markup=main_menu()
        )
        await state.set_state(MainMenu.choosing)
    elif callback.data == "back_main":
        await callback.message.edit_text(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            reply_markup=main_menu()
        )
        await state.set_state(MainMenu.choosing)