from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.crud import get_user, get_referrals_by_user
from keyboards.builder import profile_keyboard, referral_keyboard
from texts.common import profile_text, referral_text, referral_stats_text
from config import logger
from keyboards.builder import main_menu

router = Router(name="referal")

@router.callback_query(lambda c: c.data == "referral")
async def referral_handler(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    db_user = await get_user(session, telegram_id=callback.from_user.id)
    if not db_user or not db_user.referral_code:
        await callback.message.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.")
        return

    bot_name = (await callback.bot.get_me()).username
    ref_link = f"https://t.me/{bot_name}?start=ref_{db_user.referral_code}"

    await callback.message.edit_text(
        referral_text(ref_link=ref_link, bonus_balance=db_user.bonus_balance),
        reply_markup=referral_keyboard()
    )


@router.callback_query(lambda c: c.data == "my_referrals")
async def my_referrals_handler(callback: types.CallbackQuery, session: AsyncSession):
    db_user = await get_user(session, telegram_id=callback.from_user.id)
    if not db_user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    referrals = await get_referrals_by_user(session, db_user.id)
    if not referrals:
        await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö.", show_alert=True)
        return

    text = referral_stats_text(referrals)
    await callback.message.edit_text(text, reply_markup=referral_keyboard())

@router.callback_query(lambda c: c.data == "how_referral_works")
async def how_referral_works_handler(callback: types.CallbackQuery):
    text = (
        "‚ùì <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∫–∞:</b>\n\n"
        "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É.\n"
        "2. –ö–æ–≥–¥–∞ –æ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ –∏ –æ–ø–ª–∞—Ç–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å üéÅ\n"
        "3. –ë–æ–Ω—É—Å—ã –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ —Å–∫–∏–¥–∫–∏ –Ω–∞ —Ç–∞—Ä–∏—Ñ.\n\n"
        "<i>1 –±–æ–Ω—É—Å = 1 —Å–µ—Å—Å–∏—è –∏–ª–∏ 10% —Å–∫–∏–¥–∫–∏</i>"
    )
    await callback.message.edit_text(text, reply_markup=referral_keyboard())

@router.callback_query(lambda c: c.data == "copy_referral_link")
async def copy_referral_link_handler(callback: types.CallbackQuery, session: AsyncSession):
    db_user = await get_user(session, telegram_id=callback.from_user.id)
    bot_name = (await callback.bot.get_me()).username
    ref_link = f"https://t.me/{bot_name}?start=ref_{db_user.id}"
    await callback.answer(f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É:\n{ref_link}", show_alert=True)
