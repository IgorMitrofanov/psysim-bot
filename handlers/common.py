from uuid import uuid4
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from database.crud import (
    get_user, create_user, get_user_by_id, get_user_by_referral_code
)
from keyboards.builder import main_menu
from states import MainMenu
from texts.common import get_start_text, BACK_TO_MENU_TEXT
from config import logger
from datetime import datetime
from database.models import Referral, User
router = Router(name="common")


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        from_user = message.from_user
        logger.debug(f"Start command from: {from_user.id}")

        text_parts = message.text.split()
        referrer = None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏
        if len(text_parts) > 1 and text_parts[1].startswith("ref_"):
            try:
                referral_code = text_parts[1].split("_")[1]
                logger.debug(f"Processing referral code: {referral_code}")

                # –ò—â–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ –∫–æ–¥—É
                referrer = await session.execute(
                    select(User)
                    .where(User.referral_code == referral_code)
                    .execution_options(populate_existing=True)
                ).scalar_one_or_none()
                
                if referrer:
                    logger.info(f"Referrer found: {referrer.telegram_id}")
                else:
                    logger.warning(f"Referrer with code {referral_code} not found")
                    
            except Exception as e:
                logger.error(f"Error processing referral: {e}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = await get_user(session, telegram_id=from_user.id)
        is_new_user = False
        
        if db_user is None:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
            while True:
                new_referral_code = str(uuid4())[:8]
                existing_user = await get_user_by_referral_code(session, new_referral_code)
                if not existing_user:
                    break

            db_user = await create_user(
                session=session,
                telegram_id=from_user.id,
                username=from_user.username,
                language_code=from_user.language_code,
                is_premium=from_user.is_premium,
                referred_by_id=referrer.id if referrer else None,
                referral_code=new_referral_code,
            )
            logger.info(f"New user created with ID: {db_user.id}")
            is_new_user = True

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Referral
            if referrer:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ
                    referral = Referral(
                        invited_user_id=db_user.id,
                        inviter_id=referrer.id,
                        joined_at=datetime.utcnow()
                    )
                    session.add(referral)
                    
                    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                    referrer.bonus_balance += 1
                    await session.commit()
                    
                    logger.info(f"Added bonus to referrer {referrer.telegram_id}. New balance: {referrer.bonus_balance}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
                    try:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                        new_user_info = f"@{from_user.username}" if from_user.username else f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {from_user.id})"
                        ref_message = (
                            "üéâ *–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!*\n"
                            f"–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è: {new_user_info}\n"
                            f"–í–∞—à –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: *{referrer.bonus_balance}*"
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await message.bot.send_message(
                            chat_id=referrer.telegram_id,
                            text=ref_message,
                            parse_mode="Markdown"
                        )
                        logger.debug(f"Notification sent to referrer {referrer.telegram_id}")
                        
                    except Exception as e:
                        logger.error(f"Failed to send notification to referrer: {e}")
                        
                except Exception as e:
                    logger.error(f"Referral processing error: {e}")
                    await session.rollback()
                    await session.commit()  # –ö–æ–º–º–∏—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        else:
            logger.debug(f"User already exists: {db_user.id}")
            is_new_user = db_user.is_new
            if is_new_user:
                db_user.is_new = False
                await session.commit()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        text = get_start_text(is_new_user)
        
        await message.answer(text, reply_markup=main_menu())
        await state.set_state(MainMenu.choosing)

    except Exception as e:
        logger.error(f"Error in cmd_start: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
        await state.set_state(MainMenu.choosing)
    finally:
        await session.close()


@router.callback_query(lambda c: c.data == "back_main")
async def back_to_main_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        BACK_TO_MENU_TEXT, 
        reply_markup=main_menu()
    )
    await state.set_state(MainMenu.choosing)