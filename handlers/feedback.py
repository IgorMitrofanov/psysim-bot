import logging
from aiogram import Router, types
from aiogram.fsm.context import FSMContext

from states import MainMenu
from keyboards.builder import (
    cancel_feedback_keyboard, 
    back_to_main_keyboard,
    help_detail_keyboard,
    help_back_keyboard,
    feedback_menu
)

router = Router()

async def acknowledge_user_feedback(message: types.Message, state: FSMContext, success_text: str):
    data = await state.get_data()
    msg_id = data.get("feedback_msg_id")
    try:
        if msg_id:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=msg_id,
                text=success_text,
                reply_markup=back_to_main_keyboard()
            )
        await message.delete()
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ acknowledge: {e}")
    await state.set_state(MainMenu.choosing)

@router.message(MainMenu.feedback)
async def handle_feedback(message: types.Message, state: FSMContext):
    await acknowledge_user_feedback(
        message, state,
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤! –û–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ üíõ"
    )

@router.message(MainMenu.suggestion)
async def handle_suggestion(message: types.Message, state: FSMContext):
    await acknowledge_user_feedback(
        message, state,
        "üß† –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º üí´"
    )

@router.message(MainMenu.error_report)
async def handle_error(message: types.Message, state: FSMContext):
    await acknowledge_user_feedback(
        message, state,
        "üöë –û—à–∏–±–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–æ–æ–±—â–∏–ª(–∞)."
    )

@router.callback_query(lambda c: c.data == "cancel_feedback")
async def cancel_feedback_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text(
        "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
        reply_markup=back_to_main_keyboard()
    )
    await state.set_state(MainMenu.choosing)

@router.callback_query(lambda c: c.data.startswith("help"))
async def help_pages_handler(callback: types.CallbackQuery):
    from texts.feedback import (
        HELP_MAIN_TEXT,
        HELP_START_SESSION_TEXT,
        HELP_AFTER_SESSION_TEXT,
        HELP_FAQ_TEXT
    )
    
    await callback.answer()
    match callback.data:
        case "help":
            await callback.message.edit_text(
                HELP_MAIN_TEXT, 
                reply_markup=help_detail_keyboard()
            )
        case "help_start_session":
            await callback.message.edit_text(
                HELP_START_SESSION_TEXT, 
                reply_markup=help_back_keyboard()
            )
        case "help_after_session":
            await callback.message.edit_text(
                HELP_AFTER_SESSION_TEXT, 
                reply_markup=help_back_keyboard()
            )
        case "help_faq":
            await callback.message.edit_text(
                HELP_FAQ_TEXT, 
                reply_markup=help_back_keyboard()
            )
        case _:
            await callback.message.edit_text(
                "üîß –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
                reply_markup=help_back_keyboard()
            )

@router.callback_query(lambda c: c.data == "feedback_menu")
async def feedback_menu_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üí¨ –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\nüó£ –ù–∞–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ!\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=feedback_menu()
    )